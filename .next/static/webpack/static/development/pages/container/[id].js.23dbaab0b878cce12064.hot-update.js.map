{"version":3,"file":"static/webpack/static\\development\\pages\\container\\[id].js.23dbaab0b878cce12064.hot-update.js","sources":["webpack:///./Components/CaseOpeningSec/RandomItem.js"],"sourcesContent":["import { itemType } from \"../../helpers/item-type\";\r\nimport { Quality } from \"../../helpers/quality\";\r\nimport { getRandomInt } from \"../../helpers/random\";\r\nimport {\r\n  ItemChance,\r\n  ItemStatrakChance,\r\n  QualityChance,\r\n} from \"../../helpers/chance\";\r\n\r\nexport default class RandomItem {\r\n  getSouvenirItemByType = (items, type) => {\r\n    const allGroupItems = [...items.filter((val) => val.type === type)];\r\n    const ran = getRandomInt(0, allGroupItems.length);\r\n    const item = allGroupItems[ran];\r\n\r\n    const quality = getRandomQuality(item);\r\n    return { ...item, isStatrak: false, quality };\r\n  };\r\n\r\n  getItemFromCaseByType = (items, specialItems, type) => {\r\n    let isStatrak = this.getRandomStatrakByItemType(type);\r\n    if (type === itemType.GOLD) {\r\n      const ran = getRandomInt(0, specialItems.length);\r\n      const item = specialItems[ran];\r\n      const quality = this.getRandomQuality(item);\r\n      return {\r\n        ...item,\r\n        isStatrak,\r\n        quality,\r\n      };\r\n    } else {\r\n      const allGroupItems = [...items.filter((val) => val.type === type)];\r\n      const ran = getRandomInt(0, allGroupItems.length);\r\n      const item = allGroupItems[ran];\r\n      const quality = this.getRandomQuality(item);\r\n      return { ...item, isStatrak, quality };\r\n    }\r\n  };\r\n\r\n  getRandomStatrakByItemType = (type) => {\r\n    const ran = Math.random();\r\n    if (ran < ItemStatrakChance.BLUE && type == itemType.BLUE) return true;\r\n    else if (ran < ItemStatrakChance.PURPLE && type == itemType.PURPLE)\r\n      return true;\r\n    else if (ran < ItemStatrakChance.PINK && type == itemType.PINK) return true;\r\n    else if (ran < ItemStatrakChance.RED && type == itemType.RED) return true;\r\n    else if (ran < ItemStatrakChance.GOLD && type == itemType.GOLD) return true;\r\n    else return false;\r\n  };\r\n\r\n  getRandomQuality = (item) => {\r\n    const ran = Math.random();\r\n    console.log(!item.quality, ran);\r\n    if (\r\n      (!item.quality ||\r\n        item.quality.indexOf(Quality[\"Battle-Scarred\"]) !== -1) &&\r\n      ran < QualityChance.BATTLESCARRED\r\n    ) {\r\n      return Quality[\"Battle-Scarred\"];\r\n    } else if (\r\n      (!item.quality || item.quality.indexOf(Quality[\"Field-Tested\"]) !== -1) &&\r\n      ran < QualityChance.FIELDTESTED\r\n    ) {\r\n      return Quality[\"Field-Tested\"];\r\n    } else if (\r\n      (!item.quality || item.quality.indexOf(Quality[\"Well-Worn\"]) !== -1) &&\r\n      ran < QualityChance.WELLWORN\r\n    ) {\r\n      return Quality[\"Well-Worn\"];\r\n    } else if (\r\n      (!item.quality || item.quality.indexOf(Quality[\"Minimal Wear\"]) !== -1) &&\r\n      ran < QualityChance.MINIMALWEAR\r\n    ) {\r\n      return Quality[\"Minimal Wear\"];\r\n    } else if (\r\n      (!item.quality || item.quality.indexOf(Quality[\"Factory New\"]) !== -1) &&\r\n      ran < QualityChance.FACTORYNEW\r\n    ) {\r\n      return Quality[\"Factory New\"];\r\n    }\r\n  };\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AATA;AAWA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AA7BA;AA+BA;AACA;AAOA;AACA;AAxCA;AA0CA;AACA;AACA;AAAA;AAKA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AAIA;AACA;AACA;AAvEA;AACA;AADA;;;;A","sourceRoot":""}