{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { itemType } from \"../../helpers/item-type\";\nimport { Quality } from \"../../helpers/quality\";\nimport { getRandomInt } from \"../../helpers/random\";\nimport { ItemChance, ItemStatrakChance, QualityChance } from \"../../helpers/chance\";\nexport class RandomItem {\n  constructor() {\n    _defineProperty(this, \"getSouvenirItemByType\", (items, type) => {\n      const allGroupItems = [...items.filter(val => val.type === type)];\n      const item = allGroupItems[ran];\n      const ran = getRandomInt(0, allGroupItems.length);\n      const quality = getRandomQuality(item);\n      return _objectSpread({}, item, {\n        isStatrak: false,\n        quality\n      });\n    });\n\n    _defineProperty(this, \"getItemFromCaseByType\", (items, specialItems, type) => {\n      let isStatrak = this.getRandomStatrakByItemType(type);\n\n      if (type === itemType.GOLD) {\n        const ran = getRandomInt(0, specialItems.length);\n        const item = specialItems[ran];\n        const quality = getRandomQuality(item);\n        return _objectSpread({}, item, {\n          isStatrak,\n          quality\n        });\n      } else {\n        const allGroupItems = [...items.filter(val => val.type === type)];\n        const item = allGroupItems[ran];\n        const ran = getRandomInt(0, allGroupItems.length);\n        const quality = getRandomQuality(item);\n        return _objectSpread({}, item, {\n          isStatrak,\n          quality\n        });\n      }\n    });\n\n    _defineProperty(this, \"getRandomStatrakByItemType\", type => {\n      const ran = Math.random();\n      if (ran < ItemStatrakChance.BLUE && type == itemType.BLUE) return true;else if (ran < ItemStatrakChance.PURPLE && type == itemType.PURPLE) return true;else if (ran < ItemStatrakChance.PINK && type == itemType.PINK) return true;else if (ran < ItemStatrakChance.RED && type == itemType.RED) return true;else if (ran < ItemStatrakChance.GOLD && type == itemType.GOLD) return true;else return false;\n    });\n\n    _defineProperty(this, \"withQuality\", item => {\n      const ran = Math.random();\n\n      if ((item.quality == null || item.quality.indexOf(Quality[\"Battle-Scarred\"]) !== -1) && ran < QualityChance.BATTLESCARRED) {\n        this.actItem = _objectSpread({}, this.actItem, {\n          quality: Quality[\"Battle-Scarred\"]\n        });\n      } else if ((item.quality == null || item.quality.indexOf(Quality[\"Field-Tested\"]) !== -1) && ran < QualityChance.FIELDTESTED) {\n        this.actItem = _objectSpread({}, this.actItem, {\n          quality: Quality[\"Field-Tested\"]\n        });\n      } else if ((item.quality == null || item.quality.indexOf(Quality[\"Well-Worn\"]) !== -1) && ran < QualityChance.WELLWORN) {\n        this.actItem = _objectSpread({}, this.actItem, {\n          quality: Quality[\"Well-Worn\"]\n        });\n      } else if ((item.quality == null || item.quality.indexOf(Quality[\"Minimal Wear\"]) !== -1) && ran < QualityChance.MINIMALWEAR) {\n        this.actItem = _objectSpread({}, this.actItem, {\n          quality: Quality[\"Minimal Wear\"]\n        });\n      } else if ((item.quality == null || item.quality.indexOf(Quality[\"Factory New\"]) !== -1) && ran < QualityChance.FACTORYNEW) {\n        this.actItem = _objectSpread({}, this.actItem, {\n          quality: Quality[\"Factory New\"]\n        });\n      } else this.actItem = _objectSpread({}, this.actItem, {\n        quality: Quality[\"Battle-Scarred\"]\n      });\n    });\n  }\n\n}","map":{"version":3,"sources":["D:/Projects/react-ssr/react-ssr/Components/CaseOpeningSec/RandomItem.js"],"names":["itemType","Quality","getRandomInt","ItemChance","ItemStatrakChance","QualityChance","RandomItem","items","type","allGroupItems","filter","val","item","ran","length","quality","getRandomQuality","isStatrak","specialItems","getRandomStatrakByItemType","GOLD","Math","random","BLUE","PURPLE","PINK","RED","indexOf","BATTLESCARRED","actItem","FIELDTESTED","WELLWORN","MINIMALWEAR","FACTORYNEW"],"mappings":"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","sourcesContent":["import { itemType } from \"../../helpers/item-type\";\r\nimport { Quality } from \"../../helpers/quality\";\r\nimport { getRandomInt } from \"../../helpers/random\";\r\nimport {\r\n  ItemChance,\r\n  ItemStatrakChance,\r\n  QualityChance,\r\n} from \"../../helpers/chance\";\r\n\r\nexport class RandomItem {\r\n  getSouvenirItemByType = (items, type) => {\r\n    const allGroupItems = [...items.filter((val) => val.type === type)];\r\n    const item = allGroupItems[ran];\r\n    const ran = getRandomInt(0, allGroupItems.length);\r\n    const quality = getRandomQuality(item);\r\n    return { ...item, isStatrak: false, quality };\r\n  };\r\n\r\n  getItemFromCaseByType = (items, specialItems, type) => {\r\n    let isStatrak = this.getRandomStatrakByItemType(type);\r\n    if (type === itemType.GOLD) {\r\n      const ran = getRandomInt(0, specialItems.length);\r\n      const item = specialItems[ran];\r\n      const quality = getRandomQuality(item);\r\n      return {\r\n        ...item,\r\n        isStatrak,\r\n        quality,\r\n      };\r\n    } else {\r\n      const allGroupItems = [...items.filter((val) => val.type === type)];\r\n      const item = allGroupItems[ran];\r\n      const ran = getRandomInt(0, allGroupItems.length);\r\n      const quality = getRandomQuality(item);\r\n      return { ...item, isStatrak, quality };\r\n    }\r\n  };\r\n\r\n  getRandomStatrakByItemType = (type) => {\r\n    const ran = Math.random();\r\n    if (ran < ItemStatrakChance.BLUE && type == itemType.BLUE) return true;\r\n    else if (ran < ItemStatrakChance.PURPLE && type == itemType.PURPLE)\r\n      return true;\r\n    else if (ran < ItemStatrakChance.PINK && type == itemType.PINK) return true;\r\n    else if (ran < ItemStatrakChance.RED && type == itemType.RED) return true;\r\n    else if (ran < ItemStatrakChance.GOLD && type == itemType.GOLD) return true;\r\n    else return false;\r\n  };\r\n\r\n  withQuality = (item) => {\r\n    const ran = Math.random();\r\n    if (\r\n      (item.quality == null ||\r\n        item.quality.indexOf(Quality[\"Battle-Scarred\"]) !== -1) &&\r\n      ran < QualityChance.BATTLESCARRED\r\n    ) {\r\n      this.actItem = {\r\n        ...this.actItem,\r\n        quality: Quality[\"Battle-Scarred\"],\r\n      };\r\n    } else if (\r\n      (item.quality == null ||\r\n        item.quality.indexOf(Quality[\"Field-Tested\"]) !== -1) &&\r\n      ran < QualityChance.FIELDTESTED\r\n    ) {\r\n      this.actItem = {\r\n        ...this.actItem,\r\n        quality: Quality[\"Field-Tested\"],\r\n      };\r\n    } else if (\r\n      (item.quality == null ||\r\n        item.quality.indexOf(Quality[\"Well-Worn\"]) !== -1) &&\r\n      ran < QualityChance.WELLWORN\r\n    ) {\r\n      this.actItem = {\r\n        ...this.actItem,\r\n        quality: Quality[\"Well-Worn\"],\r\n      };\r\n    } else if (\r\n      (item.quality == null ||\r\n        item.quality.indexOf(Quality[\"Minimal Wear\"]) !== -1) &&\r\n      ran < QualityChance.MINIMALWEAR\r\n    ) {\r\n      this.actItem = {\r\n        ...this.actItem,\r\n        quality: Quality[\"Minimal Wear\"],\r\n      };\r\n    } else if (\r\n      (item.quality == null ||\r\n        item.quality.indexOf(Quality[\"Factory New\"]) !== -1) &&\r\n      ran < QualityChance.FACTORYNEW\r\n    ) {\r\n      this.actItem = {\r\n        ...this.actItem,\r\n        quality: Quality[\"Factory New\"],\r\n      };\r\n    } else\r\n      this.actItem = {\r\n        ...this.actItem,\r\n        quality: Quality[\"Battle-Scarred\"],\r\n      };\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}