{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { itemType } from \"../../helpers/item-type\";\nimport { Quality } from \"../../helpers/quality\";\nimport { getRandomInt } from \"../../helpers/random\";\nimport { ItemChance, ItemStatrakChance, QualityChance } from \"../../helpers/chance\";\nexport default class RandomItem {\n  constructor() {\n    _defineProperty(this, \"getSouvenirItemByType\", (items, type) => {\n      const allGroupItems = [...items.filter(val => val.type === type)];\n      const ran = getRandomInt(0, allGroupItems.length);\n      const item = allGroupItems[ran];\n      const quality = this.getRandomQuality(item);\n      return _objectSpread({}, item, {\n        title: \"Souvenir \" + item.title,\n        isStatrak: false,\n        quality\n      });\n    });\n\n    _defineProperty(this, \"getItemFromCaseByType\", (items, specialItems, type) => {\n      let isStatrak = this.getRandomStatrakByItemType(type);\n\n      if (type === itemType.GOLD) {\n        const ran = getRandomInt(0, specialItems.length);\n        const item = specialItems[ran];\n        const quality = this.getRandomQuality(item);\n        return _objectSpread({}, item, {\n          isStatrak,\n          quality\n        });\n      } else {\n        const allGroupItems = [...items.filter(val => val.type === type)];\n        const ran = getRandomInt(0, allGroupItems.length);\n        const item = allGroupItems[ran];\n        const quality = this.getRandomQuality(item);\n        return _objectSpread({}, item, {\n          isStatrak,\n          quality\n        });\n      }\n    });\n\n    _defineProperty(this, \"getRandomStatrakByItemType\", type => {\n      const ran = Math.random();\n      if (ran < ItemStatrakChance.BLUE && type == itemType.BLUE) return true;else if (ran < ItemStatrakChance.PURPLE && type == itemType.PURPLE) return true;else if (ran < ItemStatrakChance.PINK && type == itemType.PINK) return true;else if (ran < ItemStatrakChance.RED && type == itemType.RED) return true;else if (ran < ItemStatrakChance.GOLD && type == itemType.GOLD) return true;else return false;\n    });\n\n    _defineProperty(this, \"getRandomQuality\", item => {\n      const ran = Math.random();\n      console.log(!item.quality, ran);\n\n      if ((!item.quality || item.quality.indexOf(Quality[\"Battle-Scarred\"]) !== -1) && ran < QualityChance.BATTLESCARRED) {\n        return Quality[\"Battle-Scarred\"];\n      } else if ((!item.quality || item.quality.indexOf(Quality[\"Field-Tested\"]) !== -1) && ran < QualityChance.FIELDTESTED) {\n        return Quality[\"Field-Tested\"];\n      } else if ((!item.quality || item.quality.indexOf(Quality[\"Well-Worn\"]) !== -1) && ran < QualityChance.WELLWORN) {\n        return Quality[\"Well-Worn\"];\n      } else if ((!item.quality || item.quality.indexOf(Quality[\"Minimal Wear\"]) !== -1) && ran < QualityChance.MINIMALWEAR) {\n        return Quality[\"Minimal Wear\"];\n      } else if ((!item.quality || item.quality.indexOf(Quality[\"Factory New\"]) !== -1) && ran < QualityChance.FACTORYNEW) {\n        return Quality[\"Factory New\"];\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["D:/Projects/react-ssr/react-ssr/Components/CaseOpeningSec/RandomItem.js"],"names":["itemType","Quality","getRandomInt","ItemChance","ItemStatrakChance","QualityChance","RandomItem","items","type","allGroupItems","filter","val","ran","length","item","quality","getRandomQuality","title","isStatrak","specialItems","getRandomStatrakByItemType","GOLD","Math","random","BLUE","PURPLE","PINK","RED","console","log","indexOf","BATTLESCARRED","FIELDTESTED","WELLWORN","MINIMALWEAR","FACTORYNEW"],"mappings":"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","sourcesContent":["import { itemType } from \"../../helpers/item-type\";\r\nimport { Quality } from \"../../helpers/quality\";\r\nimport { getRandomInt } from \"../../helpers/random\";\r\nimport {\r\n  ItemChance,\r\n  ItemStatrakChance,\r\n  QualityChance,\r\n} from \"../../helpers/chance\";\r\n\r\nexport default class RandomItem {\r\n  getSouvenirItemByType = (items, type) => {\r\n    const allGroupItems = [...items.filter((val) => val.type === type)];\r\n    const ran = getRandomInt(0, allGroupItems.length);\r\n    const item = allGroupItems[ran];\r\n    const quality = this.getRandomQuality(item);\r\n    return {\r\n      ...item,\r\n      title: \"Souvenir \" + item.title,\r\n      isStatrak: false,\r\n      quality,\r\n    };\r\n  };\r\n\r\n  getItemFromCaseByType = (items, specialItems, type) => {\r\n    let isStatrak = this.getRandomStatrakByItemType(type);\r\n    if (type === itemType.GOLD) {\r\n      const ran = getRandomInt(0, specialItems.length);\r\n      const item = specialItems[ran];\r\n      const quality = this.getRandomQuality(item);\r\n      return {\r\n        ...item,\r\n        isStatrak,\r\n        quality,\r\n      };\r\n    } else {\r\n      const allGroupItems = [...items.filter((val) => val.type === type)];\r\n      const ran = getRandomInt(0, allGroupItems.length);\r\n      const item = allGroupItems[ran];\r\n      const quality = this.getRandomQuality(item);\r\n      return { ...item, isStatrak, quality };\r\n    }\r\n  };\r\n\r\n  getRandomStatrakByItemType = (type) => {\r\n    const ran = Math.random();\r\n    if (ran < ItemStatrakChance.BLUE && type == itemType.BLUE) return true;\r\n    else if (ran < ItemStatrakChance.PURPLE && type == itemType.PURPLE)\r\n      return true;\r\n    else if (ran < ItemStatrakChance.PINK && type == itemType.PINK) return true;\r\n    else if (ran < ItemStatrakChance.RED && type == itemType.RED) return true;\r\n    else if (ran < ItemStatrakChance.GOLD && type == itemType.GOLD) return true;\r\n    else return false;\r\n  };\r\n\r\n  getRandomQuality = (item) => {\r\n    const ran = Math.random();\r\n    console.log(!item.quality, ran);\r\n    if (\r\n      (!item.quality ||\r\n        item.quality.indexOf(Quality[\"Battle-Scarred\"]) !== -1) &&\r\n      ran < QualityChance.BATTLESCARRED\r\n    ) {\r\n      return Quality[\"Battle-Scarred\"];\r\n    } else if (\r\n      (!item.quality || item.quality.indexOf(Quality[\"Field-Tested\"]) !== -1) &&\r\n      ran < QualityChance.FIELDTESTED\r\n    ) {\r\n      return Quality[\"Field-Tested\"];\r\n    } else if (\r\n      (!item.quality || item.quality.indexOf(Quality[\"Well-Worn\"]) !== -1) &&\r\n      ran < QualityChance.WELLWORN\r\n    ) {\r\n      return Quality[\"Well-Worn\"];\r\n    } else if (\r\n      (!item.quality || item.quality.indexOf(Quality[\"Minimal Wear\"]) !== -1) &&\r\n      ran < QualityChance.MINIMALWEAR\r\n    ) {\r\n      return Quality[\"Minimal Wear\"];\r\n    } else if (\r\n      (!item.quality || item.quality.indexOf(Quality[\"Factory New\"]) !== -1) &&\r\n      ran < QualityChance.FACTORYNEW\r\n    ) {\r\n      return Quality[\"Factory New\"];\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}